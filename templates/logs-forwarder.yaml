{{- if .Values.logs.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: logs-forwarder
  namespace: {{ .Release.Namespace }}
data:
  logs-forwarder.yaml: |-
    http:
      enabled: true
      address: 0.0.0.0:4195
      root_path: /benthos
      debug_endpoints: true

    redpanda:
      seed_brokers: [ {{- .Values.source.seed_broker | quote -}} ]
      client_id: {{ .Values.source.client_id }}
      rack_id: ""
      timeout: 10s
      max_message_bytes: 1MB
      {{- if .Values.source.sasl }}
      sasl:
        - mechanism: ${SOURCE_MECHANISM}
          username: ${SOURCE_USERNAME}
          password: ${SOURCE_PASSWORD}
      {{- end }}
      {{- if .Values.source.tls }}
      tls:
      {{- toYaml .Values.source.tls | nindent 8 }}
      {{- end }}

    input:
      label: "logs_forwarder_pod_log_input"
      broker_pod_log2:
        customer_id: {{ .Values.source.customer_id }}
        namespace: ${REDPANDA_NAMESPACE}
        redpanda_pod_prefix: ${REDPANDA_POD_PREFIX}
        forwarder_pod_name: ${FORWARDER_POD_NAME}
        kafka_port: {{ .Values.source.kafka_port }}
        admin_port: {{ .Values.source.admin_port }}
        container: {{ .Values.source.container }}
        {{- if (.Values.source.sasl).enabled | default false }}
        sasl:
          - mechanism: ${SOURCE_MECHANISM}
            username: ${SOURCE_USERNAME}
            password: ${SOURCE_PASSWORD}
        {{- end }}
        {{- if (.Values.source.tls).enabled | default false }}
        tls:
        {{- toYaml .Values.source.tls | nindent 10 }}
        {{- end }}
        extractor: '^(?P<level>\w+)  (?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}) \[shard (?P<shard>\d+):'
        headers:
          redpanda_id: meta.cluster_id
          redpanda_node_id: meta.node_id
          customer_id: meta.customer_id
        template: |
          {{ .Values.logs.format | nindent 10 }}

    {{- if eq .Values.destination.transport "http" }}
    pipeline:
      processors:
        - log_rest_processor:
            key: ${! meta("customer_id")}-${! meta("redpanda_id")}-${! meta("redpanda_node_id")}
            topic: logs
            max_http_request_bytes: 100000

    output:
      label: "logs_forwarder_http_output"
      fallback:
        - http_client:
            url: {{ .Values.destination.seed_broker }}/topics/${! meta("topic") }
            verb: POST
            headers:
              Content-Type: application/vnd.kafka.binary.v2+json
            basic_auth:
              enabled: true
              username: ${TELEMETRY_USERNAME}
              password: ${TELEMETRY_PASSWORD}
        - drop: {}
    {{ end }}
    {{- if eq .Values.destination.transport "kafka" }}
    output:
      label: "logs_forwarder_kafka_output"
      fallback:
        - kafka_franz:
            seed_brokers: [ {{ .Values.destination.seed_broker }} ]
            topic: logs
            client_id: ${TELEMETRY_CLIENT}
            timeout: 10s
            max_message_bytes: 1MB
            compression: lz4
            key: ${! meta("customer_id")}-${! meta("redpanda_id")}-${! meta("redpanda_node_id")}
            batching:
              byte_size: 500000
              count: 0
              period: 10s
            sasl:
              - mechanism: ${TELEMETRY_MECHANISM}
                username: ${TELEMETRY_USERNAME}
                password: ${TELEMETRY_PASSWORD}
            tls:
              enabled: true
        - drop: {}
    {{ end }}
---
apiVersion: v1
kind: Service
metadata:
  name: logs-forwarder
  labels:
    app: logs-forwarder
spec:
  clusterIP: None
  selector:
    app: logs-forwarder
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: logs-forwarder
  labels:
    app: logs-forwarder
spec:
  serviceName: "logs-forwarder"
  selector:
    matchLabels:
      app: logs-forwarder
  replicas: {{ ((lookup "apps/v1" "StatefulSet" .Values.source.namespace "redpanda").spec).replicas | default 1 }}
  template:
    metadata:
      labels:
        app: logs-forwarder
    spec:
      containers:
        - name: logs-forwarder
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          command: ["/redpanda-connect", "run", "/config/logs-forwarder.yaml"]
          resources:
            limits:
              cpu: "1"
              memory: "{{.Values.logs.memory.k8s}}Mi"
            requests:
              cpu: "1"
              memory: "{{.Values.logs.memory.k8s}}Mi"
          volumeMounts:
            - name: logs-forwarder
              mountPath: /config
          env:
            - name: GOGC
              value: "100"
            - name: GOMEMLIMIT
              value: "{{ .Values.logs.memory.go}}MiB"
            - name: REDPANDA_NAMESPACE
              value: {{ .Values.source.namespace }}
            - name: REDPANDA_POD_PREFIX
              value: {{ .Values.source.redpanda_pod_prefix }}
            - name: FORWARDER_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: TELEMETRY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.destination.secret }}
                  key: "password"
            - name: TELEMETRY_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.destination.secret }}
                  key: "username"
            - name: TELEMETRY_MECHANISM
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.destination.secret }}
                  key: "mechanism"
            - name: TELEMETRY_CLIENT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.destination.secret }}
                  key: "username"
            {{- if (.Values.source.sasl).enabled | default false }}
            - name: SOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.source.sasl.secret }}
                  key: "password"
            - name: SOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.source.sasl.secret }}
                  key: "username"
            - name: SOURCE_MECHANISM
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.source.sasl.secret }}
                  key: "mechanism"
            {{- end }}
      volumes:
        - name: logs-forwarder
          configMap:
            name: logs-forwarder
      serviceAccountName: pod-log-reader
{{- end }}